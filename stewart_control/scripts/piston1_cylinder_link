#!/usr/bin/env python

import rospy
import random
from geometry_msgs.msg import Pose
from gazebo_msgs.msg import ModelState
from gazebo_msgs.srv import SetModelState, GetModelState

class ModelController:
    def __init__(self):
        rospy.init_node('model_controller', anonymous=True)
        self.set_state = rospy.ServiceProxy('/gazebo/set_model_state', SetModelState)
        self.model_name = 'stewart'  # Adjusted model name

    def run(self):
        rospy.loginfo("Controlling platform_link with random roll, pitch, and yaw.")

        running = True
        while running and not rospy.is_shutdown():
            # Generate random small increments for roll, pitch, and yaw
            roll_change = random.uniform(-0.05, 0.05)  # Small random change in roll
            pitch_change = random.uniform(-0.05, 0.05)  # Small random change in pitch
            yaw_change = random.uniform(-0.05, 0.05)  # Small random change in yaw

            # Construct new pose with random changes
            new_pose = self.get_current_pose()
            new_pose.orientation.x += roll_change
            new_pose.orientation.y += pitch_change
            new_pose.orientation.z += yaw_change

            # Publish updated pose to Gazebo
            self.publish_pose(new_pose)

            rospy.sleep(1.0)  # Control rate

    def get_current_pose(self):
        # Get current pose of platform_link from Gazebo
        try:
            get_state = rospy.ServiceProxy('/gazebo/get_model_state', GetModelState)
            resp = get_state(self.model_name, '')  # Get full state without reference frame
            return resp.pose
        except rospy.ServiceException as e:
            rospy.logerr(f"Service call failed: {e}")
            return None

    def publish_pose(self, pose):
        # Create ModelState message with updated pose
        state = ModelState()
        state.model_name = self.model_name
        state.pose = pose

        # Call the set_model_state service to update the pose in Gazebo
        try:
            resp = self.set_state(state)
            rospy.loginfo("Set model state success")
        except rospy.ServiceException as e:
            rospy.logerr(f"Service call failed: {e}")

if __name__ == '__main__':
    try:
        controller = ModelController()
        controller.run()
    except rospy.ROSInterruptException:
        pass

